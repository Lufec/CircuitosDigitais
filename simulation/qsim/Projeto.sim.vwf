/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("a")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("a[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "a";
}

SIGNAL("a[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "a";
}

SIGNAL("a[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "a";
}

SIGNAL("a[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "a";
}

SIGNAL("b")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("b[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "b";
}

SIGNAL("b[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "b";
}

SIGNAL("b[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "b";
}

SIGNAL("b[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "b";
}

SIGNAL("cout")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("coutmai")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("coutmen")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dsp")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dsp[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dsp";
}

SIGNAL("dsp[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dsp";
}

SIGNAL("dsp[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dsp";
}

SIGNAL("dsp[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dsp";
}

SIGNAL("dsp[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dsp";
}

SIGNAL("dsp[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dsp";
}

SIGNAL("dsp[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dsp";
}

SIGNAL("key")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("key[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "key";
}

SIGNAL("key[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "key";
}

SIGNAL("key[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "key";
}

SIGNAL("ld")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("rinv")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rinv[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rinv";
}

SIGNAL("rinv[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rinv";
}

SIGNAL("rinv[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rinv";
}

SIGNAL("rinv[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rinv";
}

SIGNAL("rsoma")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rsoma[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rsoma";
}

SIGNAL("rsoma[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rsoma";
}

SIGNAL("rsoma[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rsoma";
}

SIGNAL("rsoma[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rsoma";
}

SIGNAL("rsub")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rsub[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rsub";
}

SIGNAL("rsub[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rsub";
}

SIGNAL("rsub[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rsub";
}

SIGNAL("rsub[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "rsub";
}

TRANSITION_LIST("a[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 25;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
	}
}

TRANSITION_LIST("a[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 50;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("a[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 100;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("a[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 200;
			LEVEL 0 FOR 2.5;
			LEVEL 1 FOR 2.5;
		}
	}
}

TRANSITION_LIST("b[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 12;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("b[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 25;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
	}
}

TRANSITION_LIST("b[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 50;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("b[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 100;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("cout")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 27.5;
		LEVEL 1 FOR 12.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 42.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 32.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 42.5;
		LEVEL 1 FOR 17.5;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 37.5;
		LEVEL 0 FOR 52.5;
		LEVEL 1 FOR 27.5;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 67.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 122.5;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 27.5;
			LEVEL 1 FOR 5.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 47.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("coutmai")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.5;
		NODE
		{
			REPEAT = 12;
			LEVEL 1 FOR 37.5;
			LEVEL 0 FOR 42.5;
		}
		LEVEL 1 FOR 37.5;
	}
}

TRANSITION_LIST("coutmen")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 12;
			LEVEL 1 FOR 37.5;
			LEVEL 0 FOR 42.5;
		}
	}
}

TRANSITION_LIST("dsp[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 7.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 280.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 140.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 17.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 12.5;
	}
}

TRANSITION_LIST("dsp[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 280.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 17.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 12.5;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 5.0;
	}
}

TRANSITION_LIST("dsp[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 37.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 17.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 290.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 17.5;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 12.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 17.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 2.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 17.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 2.5;
		}
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 2.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 17.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 2.5;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
	}
}

TRANSITION_LIST("dsp[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.5;
			LEVEL 1 FOR 2.5;
		}
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 7.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.5;
			LEVEL 1 FOR 2.5;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 2.5;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 37.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 12.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 290.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 12.5;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 2.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 2.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.5;
			LEVEL 1 FOR 5.0;
		}
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 5.0;
	}
}

TRANSITION_LIST("dsp[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 2.5;
		}
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 37.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 290.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 7.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 5.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 5.0;
	}
}

TRANSITION_LIST("dsp[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 7.5;
			LEVEL 1 FOR 2.5;
		}
		LEVEL 0 FOR 2.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 10.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 27.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 25.0;
		LEVEL 1 FOR 12.5;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 282.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 52.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 2.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 5.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 7.5;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("dsp[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.5;
			LEVEL 1 FOR 2.5;
		}
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 15.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 2.5;
		}
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 37.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 12.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 292.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 12.5;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 52.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 17.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 10.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 2.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.5;
			LEVEL 1 FOR 5.0;
		}
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
	}
}

TRANSITION_LIST("key[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 340.0;
		LEVEL 1 FOR 490.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 5.0;
	}
}

TRANSITION_LIST("key[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 210.0;
		LEVEL 1 FOR 130.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 140.0;
		LEVEL 0 FOR 140.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 35.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
	}
}

TRANSITION_LIST("key[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 110.0;
		LEVEL 0 FOR 280.0;
		LEVEL 1 FOR 140.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
	}
}

TRANSITION_LIST("ld")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 85.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 450.0;
	}
}

TRANSITION_LIST("rinv[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 25;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
	}
}

TRANSITION_LIST("rinv[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 50;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
		}
	}
}

TRANSITION_LIST("rinv[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 100;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
		}
	}
}

TRANSITION_LIST("rinv[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 200;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 2.5;
		}
	}
}

TRANSITION_LIST("rsoma[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 12;
			LEVEL 0 FOR 15.0;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 15.0;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
		}
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 12.5;
		LEVEL 0 FOR 12.5;
	}
}

TRANSITION_LIST("rsoma[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 25;
			LEVEL 0 FOR 7.5;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 7.5;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("rsoma[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 50;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 2.5;
			LEVEL 0 FOR 2.5;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 2.5;
			LEVEL 1 FOR 2.5;
		}
	}
}

TRANSITION_LIST("rsoma[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.5;
		NODE
		{
			REPEAT = 99;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("rsub[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 37.5;
		NODE
		{
			REPEAT = 12;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 2.5;
	}
}

TRANSITION_LIST("rsub[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 17.5;
		NODE
		{
			REPEAT = 24;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("rsub[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7.5;
		NODE
		{
			REPEAT = 49;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 2.5;
	}
}

TRANSITION_LIST("rsub[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.5;
		NODE
		{
			REPEAT = 99;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 2.5;
	}
}

DISPLAY_LINE
{
	CHANNEL = "a";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4;
}

DISPLAY_LINE
{
	CHANNEL = "a[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "a[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "a[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "a[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "b";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
	CHILDREN = 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "b[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "b[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "b[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "b[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "cout";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "dsp";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
	CHILDREN = 12, 13, 14, 15, 16, 17, 18;
}

DISPLAY_LINE
{
	CHANNEL = "dsp[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "dsp[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "dsp[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "dsp[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "dsp[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "dsp[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "dsp[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "ld";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "key";
	EXPAND_STATUS = EXPANDED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
	CHILDREN = 21, 22, 23;
}

DISPLAY_LINE
{
	CHANNEL = "key[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "key[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "key[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "coutmen";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "coutmai";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "rinv";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 0;
	CHILDREN = 27, 28, 29, 30;
}

DISPLAY_LINE
{
	CHANNEL = "rinv[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "rinv[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "rinv[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "rinv[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 26;
}

DISPLAY_LINE
{
	CHANNEL = "rsoma";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 0;
	CHILDREN = 32, 33, 34, 35;
}

DISPLAY_LINE
{
	CHANNEL = "rsoma[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "rsoma[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "rsoma[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "rsoma[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "rsub";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 36;
	TREE_LEVEL = 0;
	CHILDREN = 37, 38, 39, 40;
}

DISPLAY_LINE
{
	CHANNEL = "rsub[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 36;
}

DISPLAY_LINE
{
	CHANNEL = "rsub[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 36;
}

DISPLAY_LINE
{
	CHANNEL = "rsub[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 36;
}

DISPLAY_LINE
{
	CHANNEL = "rsub[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 36;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
