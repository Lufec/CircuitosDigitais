// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/07/2019 10:59:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Projeto
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Projeto_vlg_sample_tst(
	a,
	b,
	key,
	ld,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input [2:0] key;
input  ld;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or key or ld)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Projeto_vlg_check_tst (
	cout,
	coutmai,
	coutmen,
	dsp,
	rinv,
	rsoma,
	rsub,
	sampler_rx
);
input  cout;
input  coutmai;
input  coutmen;
input [6:0] dsp;
input [3:0] rinv;
input [3:0] rsoma;
input [3:0] rsub;
input sampler_rx;

reg  cout_expected;
reg  coutmai_expected;
reg  coutmen_expected;
reg [6:0] dsp_expected;
reg [3:0] rinv_expected;
reg [3:0] rsoma_expected;
reg [3:0] rsub_expected;

reg  cout_prev;
reg  coutmai_prev;
reg  coutmen_prev;
reg [6:0] dsp_prev;
reg [3:0] rinv_prev;
reg [3:0] rsoma_prev;
reg [3:0] rsub_prev;

reg  cout_expected_prev;
reg  coutmai_expected_prev;
reg  coutmen_expected_prev;
reg [6:0] dsp_expected_prev;
reg [3:0] rinv_expected_prev;
reg [3:0] rsoma_expected_prev;
reg [3:0] rsub_expected_prev;

reg  last_cout_exp;
reg  last_coutmai_exp;
reg  last_coutmen_exp;
reg [6:0] last_dsp_exp;
reg [3:0] last_rinv_exp;
reg [3:0] last_rsoma_exp;
reg [3:0] last_rsub_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	coutmai_prev = coutmai;
	coutmen_prev = coutmen;
	dsp_prev = dsp;
	rinv_prev = rinv;
	rsoma_prev = rsoma;
	rsub_prev = rsub;
end

// update expected /o prevs

always @(trigger)
begin
	cout_expected_prev = cout_expected;
	coutmai_expected_prev = coutmai_expected;
	coutmen_expected_prev = coutmen_expected;
	dsp_expected_prev = dsp_expected;
	rinv_expected_prev = rinv_expected;
	rsoma_expected_prev = rsoma_expected;
	rsub_expected_prev = rsub_expected;
end



// expected cout
initial
begin
	cout_expected = 1'bX;
end 
// expected dsp[ 6 ]
initial
begin
	dsp_expected[6] = 1'bX;
end 
// expected dsp[ 5 ]
initial
begin
	dsp_expected[5] = 1'bX;
end 
// expected dsp[ 4 ]
initial
begin
	dsp_expected[4] = 1'bX;
end 
// expected dsp[ 3 ]
initial
begin
	dsp_expected[3] = 1'bX;
end 
// expected dsp[ 2 ]
initial
begin
	dsp_expected[2] = 1'bX;
end 
// expected dsp[ 1 ]
initial
begin
	dsp_expected[1] = 1'bX;
end 
// expected dsp[ 0 ]
initial
begin
	dsp_expected[0] = 1'bX;
end 

// expected coutmen
initial
begin
	coutmen_expected = 1'bX;
end 

// expected coutmai
initial
begin
	coutmai_expected = 1'bX;
end 
// expected rinv[ 3 ]
initial
begin
	rinv_expected[3] = 1'bX;
end 
// expected rinv[ 2 ]
initial
begin
	rinv_expected[2] = 1'bX;
end 
// expected rinv[ 1 ]
initial
begin
	rinv_expected[1] = 1'bX;
end 
// expected rinv[ 0 ]
initial
begin
	rinv_expected[0] = 1'bX;
end 
// expected rsoma[ 3 ]
initial
begin
	rsoma_expected[3] = 1'bX;
end 
// expected rsoma[ 2 ]
initial
begin
	rsoma_expected[2] = 1'bX;
end 
// expected rsoma[ 1 ]
initial
begin
	rsoma_expected[1] = 1'bX;
end 
// expected rsoma[ 0 ]
initial
begin
	rsoma_expected[0] = 1'bX;
end 
// expected rsub[ 3 ]
initial
begin
	rsub_expected[3] = 1'bX;
end 
// expected rsub[ 2 ]
initial
begin
	rsub_expected[2] = 1'bX;
end 
// expected rsub[ 1 ]
initial
begin
	rsub_expected[1] = 1'bX;
end 
// expected rsub[ 0 ]
initial
begin
	rsub_expected[0] = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or coutmai_expected or coutmai or coutmen_expected or coutmen or dsp_expected or dsp or rinv_expected or rinv or rsoma_expected or rsoma or rsub_expected or rsub)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected coutmai = %b | expected coutmen = %b | expected dsp = %b | expected rinv = %b | expected rsoma = %b | expected rsub = %b | ",cout_expected_prev,coutmai_expected_prev,coutmen_expected_prev,dsp_expected_prev,rinv_expected_prev,rsoma_expected_prev,rsub_expected_prev);
	$display("| real cout = %b | real coutmai = %b | real coutmen = %b | real dsp = %b | real rinv = %b | real rsoma = %b | real rsub = %b | ",cout_prev,coutmai_prev,coutmen_prev,dsp_prev,rinv_prev,rsoma_prev,rsub_prev);
`endif
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( coutmai_expected_prev !== 1'bx ) && ( coutmai_prev !== coutmai_expected_prev )
		&& ((coutmai_expected_prev !== last_coutmai_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port coutmai :: @time = %t",  $realtime);
		$display ("     Expected value = %b", coutmai_expected_prev);
		$display ("     Real value = %b", coutmai_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_coutmai_exp = coutmai_expected_prev;
	end
	if (
		( coutmen_expected_prev !== 1'bx ) && ( coutmen_prev !== coutmen_expected_prev )
		&& ((coutmen_expected_prev !== last_coutmen_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port coutmen :: @time = %t",  $realtime);
		$display ("     Expected value = %b", coutmen_expected_prev);
		$display ("     Real value = %b", coutmen_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_coutmen_exp = coutmen_expected_prev;
	end
	if (
		( dsp_expected_prev[0] !== 1'bx ) && ( dsp_prev[0] !== dsp_expected_prev[0] )
		&& ((dsp_expected_prev[0] !== last_dsp_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dsp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dsp_expected_prev);
		$display ("     Real value = %b", dsp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dsp_exp[0] = dsp_expected_prev[0];
	end
	if (
		( dsp_expected_prev[1] !== 1'bx ) && ( dsp_prev[1] !== dsp_expected_prev[1] )
		&& ((dsp_expected_prev[1] !== last_dsp_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dsp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dsp_expected_prev);
		$display ("     Real value = %b", dsp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dsp_exp[1] = dsp_expected_prev[1];
	end
	if (
		( dsp_expected_prev[2] !== 1'bx ) && ( dsp_prev[2] !== dsp_expected_prev[2] )
		&& ((dsp_expected_prev[2] !== last_dsp_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dsp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dsp_expected_prev);
		$display ("     Real value = %b", dsp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dsp_exp[2] = dsp_expected_prev[2];
	end
	if (
		( dsp_expected_prev[3] !== 1'bx ) && ( dsp_prev[3] !== dsp_expected_prev[3] )
		&& ((dsp_expected_prev[3] !== last_dsp_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dsp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dsp_expected_prev);
		$display ("     Real value = %b", dsp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dsp_exp[3] = dsp_expected_prev[3];
	end
	if (
		( dsp_expected_prev[4] !== 1'bx ) && ( dsp_prev[4] !== dsp_expected_prev[4] )
		&& ((dsp_expected_prev[4] !== last_dsp_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dsp[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dsp_expected_prev);
		$display ("     Real value = %b", dsp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dsp_exp[4] = dsp_expected_prev[4];
	end
	if (
		( dsp_expected_prev[5] !== 1'bx ) && ( dsp_prev[5] !== dsp_expected_prev[5] )
		&& ((dsp_expected_prev[5] !== last_dsp_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dsp[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dsp_expected_prev);
		$display ("     Real value = %b", dsp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dsp_exp[5] = dsp_expected_prev[5];
	end
	if (
		( dsp_expected_prev[6] !== 1'bx ) && ( dsp_prev[6] !== dsp_expected_prev[6] )
		&& ((dsp_expected_prev[6] !== last_dsp_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dsp[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dsp_expected_prev);
		$display ("     Real value = %b", dsp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dsp_exp[6] = dsp_expected_prev[6];
	end
	if (
		( rinv_expected_prev[0] !== 1'bx ) && ( rinv_prev[0] !== rinv_expected_prev[0] )
		&& ((rinv_expected_prev[0] !== last_rinv_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rinv[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rinv_expected_prev);
		$display ("     Real value = %b", rinv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rinv_exp[0] = rinv_expected_prev[0];
	end
	if (
		( rinv_expected_prev[1] !== 1'bx ) && ( rinv_prev[1] !== rinv_expected_prev[1] )
		&& ((rinv_expected_prev[1] !== last_rinv_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rinv[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rinv_expected_prev);
		$display ("     Real value = %b", rinv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rinv_exp[1] = rinv_expected_prev[1];
	end
	if (
		( rinv_expected_prev[2] !== 1'bx ) && ( rinv_prev[2] !== rinv_expected_prev[2] )
		&& ((rinv_expected_prev[2] !== last_rinv_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rinv[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rinv_expected_prev);
		$display ("     Real value = %b", rinv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rinv_exp[2] = rinv_expected_prev[2];
	end
	if (
		( rinv_expected_prev[3] !== 1'bx ) && ( rinv_prev[3] !== rinv_expected_prev[3] )
		&& ((rinv_expected_prev[3] !== last_rinv_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rinv[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rinv_expected_prev);
		$display ("     Real value = %b", rinv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rinv_exp[3] = rinv_expected_prev[3];
	end
	if (
		( rsoma_expected_prev[0] !== 1'bx ) && ( rsoma_prev[0] !== rsoma_expected_prev[0] )
		&& ((rsoma_expected_prev[0] !== last_rsoma_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rsoma[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rsoma_expected_prev);
		$display ("     Real value = %b", rsoma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rsoma_exp[0] = rsoma_expected_prev[0];
	end
	if (
		( rsoma_expected_prev[1] !== 1'bx ) && ( rsoma_prev[1] !== rsoma_expected_prev[1] )
		&& ((rsoma_expected_prev[1] !== last_rsoma_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rsoma[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rsoma_expected_prev);
		$display ("     Real value = %b", rsoma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rsoma_exp[1] = rsoma_expected_prev[1];
	end
	if (
		( rsoma_expected_prev[2] !== 1'bx ) && ( rsoma_prev[2] !== rsoma_expected_prev[2] )
		&& ((rsoma_expected_prev[2] !== last_rsoma_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rsoma[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rsoma_expected_prev);
		$display ("     Real value = %b", rsoma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rsoma_exp[2] = rsoma_expected_prev[2];
	end
	if (
		( rsoma_expected_prev[3] !== 1'bx ) && ( rsoma_prev[3] !== rsoma_expected_prev[3] )
		&& ((rsoma_expected_prev[3] !== last_rsoma_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rsoma[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rsoma_expected_prev);
		$display ("     Real value = %b", rsoma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rsoma_exp[3] = rsoma_expected_prev[3];
	end
	if (
		( rsub_expected_prev[0] !== 1'bx ) && ( rsub_prev[0] !== rsub_expected_prev[0] )
		&& ((rsub_expected_prev[0] !== last_rsub_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rsub[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rsub_expected_prev);
		$display ("     Real value = %b", rsub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_rsub_exp[0] = rsub_expected_prev[0];
	end
	if (
		( rsub_expected_prev[1] !== 1'bx ) && ( rsub_prev[1] !== rsub_expected_prev[1] )
		&& ((rsub_expected_prev[1] !== last_rsub_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rsub[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rsub_expected_prev);
		$display ("     Real value = %b", rsub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_rsub_exp[1] = rsub_expected_prev[1];
	end
	if (
		( rsub_expected_prev[2] !== 1'bx ) && ( rsub_prev[2] !== rsub_expected_prev[2] )
		&& ((rsub_expected_prev[2] !== last_rsub_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rsub[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rsub_expected_prev);
		$display ("     Real value = %b", rsub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_rsub_exp[2] = rsub_expected_prev[2];
	end
	if (
		( rsub_expected_prev[3] !== 1'bx ) && ( rsub_prev[3] !== rsub_expected_prev[3] )
		&& ((rsub_expected_prev[3] !== last_rsub_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rsub[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rsub_expected_prev);
		$display ("     Real value = %b", rsub_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_rsub_exp[3] = rsub_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Projeto_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg [2:0] key;
reg ld;
// wires                                               
wire cout;
wire coutmai;
wire coutmen;
wire [6:0] dsp;
wire [3:0] rinv;
wire [3:0] rsoma;
wire [3:0] rsub;

wire sampler;                             

// assign statements (if any)                          
Projeto i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.cout(cout),
	.coutmai(coutmai),
	.coutmen(coutmen),
	.dsp(dsp),
	.key(key),
	.ld(ld),
	.rinv(rinv),
	.rsoma(rsoma),
	.rsub(rsub)
);
// a[ 3 ]
always
begin
	a[3] = 1'b0;
	a[3] = #20000 1'b1;
	#20000;
end 
// a[ 2 ]
always
begin
	a[2] = 1'b0;
	a[2] = #10000 1'b1;
	#10000;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b0;
	a[1] = #5000 1'b1;
	#5000;
end 
// a[ 0 ]
always
begin
	a[0] = 1'b0;
	a[0] = #2500 1'b1;
	#2500;
end 
// b[ 3 ]
initial
begin
	repeat(12)
	begin
		b[3] = 1'b0;
		b[3] = #40000 1'b1;
		# 40000;
	end
	b[3] = 1'b0;
end 
// b[ 2 ]
always
begin
	b[2] = 1'b0;
	b[2] = #20000 1'b1;
	#20000;
end 
// b[ 1 ]
always
begin
	b[1] = 1'b0;
	b[1] = #10000 1'b1;
	#10000;
end 
// b[ 0 ]
always
begin
	b[0] = 1'b0;
	b[0] = #5000 1'b1;
	#5000;
end 

// ld
initial
begin
	ld = 1'b1;
	ld = #40000 1'b0;
	ld = #5000 1'b1;
	ld = #5000 1'b0;
	ld = #5000 1'b1;
	ld = #85000 1'b0;
	ld = #5000 1'b1;
	ld = #5000 1'b0;
	ld = #5000 1'b1;
	ld = #25000 1'b0;
	ld = #10000 1'b1;
	ld = #60000 1'b0;
	ld = #5000 1'b1;
	ld = #5000 1'b0;
	ld = #5000 1'b1;
	ld = #25000 1'b0;
	ld = #10000 1'b1;
	ld = #100000 1'b0;
	ld = #5000 1'b1;
	ld = #5000 1'b0;
	ld = #5000 1'b1;
	ld = #25000 1'b0;
	ld = #10000 1'b1;
	ld = #50000 1'b0;
	ld = #5000 1'b1;
	ld = #5000 1'b0;
	ld = #5000 1'b1;
	ld = #25000 1'b0;
	ld = #10000 1'b1;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b0;
	key[2] = #340000 1'b1;
	key[2] = #490000 1'b0;
	key[2] = #5000 1'b1;
	key[2] = #5000 1'b0;
	key[2] = #5000 1'b1;
	key[2] = #25000 1'b0;
	key[2] = #10000 1'b1;
	key[2] = #5000 1'b0;
	key[2] = #10000 1'b1;
	key[2] = #30000 1'b0;
	key[2] = #10000 1'b1;
	key[2] = #10000 1'b0;
	key[2] = #5000 1'b1;
	key[2] = #15000 1'b0;
	key[2] = #5000 1'b1;
	key[2] = #5000 1'b0;
	key[2] = #20000 1'b1;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
	key[1] = #210000 1'b1;
	key[1] = #130000 1'b0;
	key[1] = #150000 1'b1;
	key[1] = #140000 1'b0;
	key[1] = #140000 1'b1;
	key[1] = #80000 1'b0;
	key[1] = #5000 1'b1;
	key[1] = #10000 1'b0;
	key[1] = #5000 1'b1;
	key[1] = #15000 1'b0;
	key[1] = #10000 1'b1;
	key[1] = #5000 1'b0;
	key[1] = #10000 1'b1;
	key[1] = #5000 1'b0;
	key[1] = #5000 1'b1;
	key[1] = #10000 1'b0;
	key[1] = #5000 1'b1;
	key[1] = #10000 1'b0;
	key[1] = #5000 1'b1;
	key[1] = #5000 1'b0;
	key[1] = #35000 1'b1;
	key[1] = #5000 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
	key[0] = #100000 1'b1;
	key[0] = #110000 1'b0;
	key[0] = #280000 1'b1;
	key[0] = #140000 1'b0;
	key[0] = #10000 1'b1;
	key[0] = #80000 1'b0;
	key[0] = #50000 1'b1;
	key[0] = #60000 1'b0;
	key[0] = #10000 1'b1;
	key[0] = #20000 1'b0;
	key[0] = #10000 1'b1;
	key[0] = #15000 1'b0;
	key[0] = #5000 1'b1;
	key[0] = #5000 1'b0;
	key[0] = #5000 1'b1;
	key[0] = #5000 1'b0;
	key[0] = #5000 1'b1;
	key[0] = #5000 1'b0;
	key[0] = #10000 1'b1;
	key[0] = #25000 1'b0;
	key[0] = #10000 1'b1;
	key[0] = #10000 1'b0;
	key[0] = #5000 1'b1;
	key[0] = #10000 1'b0;
	key[0] = #5000 1'b1;
	key[0] = #5000 1'b0;
end 

Projeto_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.key(key),
	.ld(ld),
	.sampler_tx(sampler)
);

Projeto_vlg_check_tst tb_out(
	.cout(cout),
	.coutmai(coutmai),
	.coutmen(coutmen),
	.dsp(dsp),
	.rinv(rinv),
	.rsoma(rsoma),
	.rsub(rsub),
	.sampler_rx(sampler)
);
endmodule

